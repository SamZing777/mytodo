{"version":3,"sources":["components/List/index.jsx","components/header.jsx","container/ToDo.jsx","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","updateItem","target","icon","faTrash","onClick","deleteItem","durationn","easing","Header","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","newItems","filteredItems","filter","Fragment","onSubmit","placeholder","List","Component","ToDo","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.01a1d80d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nimport './style.css';\r\n\r\n\r\nfunction ListItems(props){\r\n    \r\n    const items = props.items;\r\n    const listItems = items.map(item => {\r\n        return (\r\n            <div className=\"col list mb-1\" key={item.key}>\r\n                <p>\r\n                    <input type=\"text\" id={item.key} value={item.text} onChange={\r\n                                (e) => {\r\n                                    props.updateItem(e.target.value, item.key)\r\n                                }\r\n                            }/>\r\n                    <span> <FontAwesomeIcon className=\"text-danger\" icon={faTrash} onClick={() => props.deleteItem(item.key)} /> </span>\r\n                </p>\r\n                \r\n            </div>\r\n        )\r\n    });\r\n    return(\r\n        <div>\r\n            <FlipMove durationn={250} easing=\"ease-in-out\">\r\n                { listItems }\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItems; ","import React, { Component } from 'react';\r\n\r\nimport ListItems from './List/index';\r\n\r\nimport './style.css';\r\n\r\n\r\nclass Header extends Component{\r\n    \r\n   constructor(props){\r\n        super(props);\r\n        \r\n            this.state = {\r\n                items: [],\r\n                \r\n                currentItem: {\r\n                    text: '',\r\n                    key: ''\r\n            }\r\n        }\r\n       \r\n       this.handleInput = this.handleInput.bind(this);\r\n       this.addItem = this.addItem.bind(this);\r\n       this.deleteItem = this.deleteItem.bind(this);\r\n       this.updateItem = this.updateItem.bind(this);\r\n    }\r\n    \r\n    handleInput(e){\r\n        this.setState({\r\n            currentItem: {\r\n                text: e.target.value,\r\n                key: Date.now()\r\n            }\r\n        });\r\n    }\r\n    \r\n    addItem(e){\r\n        e.preventDefault();\r\n        const newItem = this.state.currentItem;\r\n        if(newItem.text !== \"\"){\r\n            const newItems = [...this.state.items, newItem];\r\n            this.setState({\r\n                items: newItems,\r\n                currentItem: {\r\n                    text: '',\r\n                    key: ''\r\n                }\r\n            })\r\n        }\r\n    }\r\n    \r\n    deleteItem(key){\r\n        const filteredItems = this.state.items.filter(item => item.key !== key);\r\n        this.setState({\r\n            items:filteredItems\r\n        }) \r\n    }\r\n    \r\n    updateItem(text, key){\r\n        const items = this.state.items;\r\n        items.map(item => {\r\n            if(item.key === key ){\r\n                item.text = text;\r\n            }\r\n        })\r\n        this.setState({\r\n            items: items\r\n        })\r\n    }\r\n    \r\n    \r\n    render(){\r\n    \r\n        return(\r\n            <React.Fragment>\r\n                <header className=\"text-center\">\r\n                    <form id=\"to-do\"  onSubmit={ this.addItem }>\r\n                        <input type=\"text\" placeholder=\"Enter to do\" value={ this.state.currentItem.text } onChange={ this.handleInput } />\r\n                        <button type=\"submit\">Add</button>\r\n                    </form>\r\n                </header>\r\n                \r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <ListItems items = {this.state.items} deleteItem = {this.deleteItem} updateItem={this.updateItem} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport Header from '../components/header';\r\n\r\n\r\nconst ToDo = props =>{\r\n    return(\r\n        <div className=\"container\">\r\n            \r\n            <div className=\"row mt-4\">\r\n                <div className=\"col\">\r\n                    <h2 className=\"text-light text-center\">My To do</h2>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"row mt-4\">\r\n                <div className=\"col\">\r\n                    <Header />\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDo;","import React, { Component } from 'react';\n\nimport ToDo from './container/ToDo';\n\nimport './App.css';\n\nclass App extends Component {\n\n  render(){\n\n  return (\n    <div className=\"App\">\n      <ToDo />\n    </div>\n    \n    );\n\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}